-- Excavate room
-- 
-- Starting at a south-east corner, excavate a space 3 block high toward west that has a fixed north-south distance (D) and east-west distance (W)
--
-- Usage: room <D> <W>

FRONT = 1
UP = 2
DOWN = 3
inspects = { turtle.inspect, turtle.inspectUp, turtle.inspectDown }
places   = { turtle.place,   turtle.placeUp,   turtle.placeDown }
digs     = { turtle.dig,     turtle.digUp,     turtle.digDown }

os.loadAPI("common")

-- dig 3 block tall one block wide corridor
function digForward(n)
  n = n or 1
  for i=1,n do
    safeDig(FRONT)
    safeDig(UP)
    safeDig(DOWN)

    -- really make sure we have moved forward, as gravel falling
    -- down could prevent us from moving forward)
    while not turtle.forward() do
      safeDig(FRONT)
    end
  end
end

--- dig() with defensive check into the given direction
function safeDig(d)
  while true do
    local success,data=inspects[d]()
    if success then
      if data.name == "ComputerCraft::CC-Turtle" then
        -- pause in hope that the other turtle will move away
        os.sleep(3)
      elseif data.name=="minecraft:lava" or data.name=="minecraft:water" then
        -- put a block to get rid of this source block
        common.select("minecraft:cobblestone")
        places[d]()
      else
        digs[d]()
      end
    else
      -- nothing in this space, digging complete
      return
    end
  end
end

function isSafeToDig(data)
  if data and data.name=="ComputerCraft::CC-Turtle" then
    return false
  else
    return true
  end
end

-- start from south east corner (inclusive) facing north, then sweep the size D (in N/S direction) x W (in E/W direction)
-- applying function 'f' on each location. 'f' must do 'forward' in the end
function sweepWith(d,w,f)
  for i=1,w do
    local t 
    if i%2==1 then
      t = turtle.turnLeft
    else
      t = turtle.turnRight
    end
    
    for j=1,d-1 do
      f()
    end
    
    if i==w then
      return
    end

    t()
    f()
    t()
	   
	common.refuel()
  end
end

-- start from south east corner (inclusive) facing north, make size D (in N/S direction) x W (in E/W direction) x 3 (height) room
function room(d,w)
  sweepWith(d,w,digForward)
end

-- room(17,33)
args={...}
room(tonumber(args[1]),tonumber(args[2]))
