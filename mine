-- Industrial Scale Mining
-- 
-- Starting at a south-east corner, excavate a space 3 block high toward west that has a fixed north-south distance (D)
-- 
-- Initially, put a large chest facing a turtle, with a turtle next to it (but a level above.)
-- The miner will go forward 'D' distance and come back the next lane, then drop off the loots into the chest,
-- and repeat the run, gradually moving to west.
--
-- The turtle will automatically refuel itself from coals it finds.
--
-- initial layout from top:
--
--    C                 C:chest, ^:turtle facing north
--   ^C
--
-- initial layout from rear:
--
--   T                  T:turtle's back, C:chest from side
--    C
--
D = 100

FRONT = 1
UP = 2
DOWN = 3
inspects = { turtle.inspect, turtle.inspectUp, turtle.inspectDown }
places   = { turtle.place,   turtle.placeUp,   turtle.placeDown }
digs     = { turtle.dig,     turtle.digUp,     turtle.digDown }

os.loadAPI("common")

-- dig 3 block tall one block wide corridor
function digForward(n)
  for i=1,n do
    safeDig(FRONT)
    safeDig(UP)
    safeDig(DOWN)

    -- really make sure we have moved forward, as gravel falling
    -- down could prevent us from moving forward)
    while not turtle.forward() do
      safeDig(FRONT)
    end
  end
end

--- dig() with defensive check into the given direction
function safeDig(d)
  while true do
    local success,data=inspects[d]()
    if success then
      if data.name == "ComputerCraft::CC-Turtle" then
        -- pause in hope that the other turtle will move away
        os.sleep(3)
      elseif data.name=="minecraft:lava" or data.name=="minecraft:water" then
        -- put a block to get rid of this source block
        common.select("minecraft:cobblestone")
        places[d]()
      else
        digs[d]()
      end
    else
      -- nothing in this space, digging complete
      return
    end
  end
end

function isSafeToDig(data)
  if data and data.name=="ComputerCraft::CC-Turtle" then
    return false
  else
    return true
  end
end

-- make a roundtrip, making 3 block tall 2 block wide corridor
-- when it's done, turtle faces the backward
function roundtrip(n)
  digForward(n)
  turtle.turnLeft()
  digForward(1)
  turtle.turnLeft()
  digForward(n)
end

-- go forward until we find a chest, drop all the loots, then
-- come back to where we started facing backward
function chestRun()
  -- create space for lanes
  turtle.digUp()
  turtle.digDown()

  -- go the lower lane (and come back in the higher lane)
  turtle.turnLeft()
  turtle.down()

  local dist = 0  -- count the distance we moved to be able to go back
  while true do
    local success, data = turtle.inspect()
    if not success then
      -- nothing in front of us
      turtle.forward()
      dist = dist +1
      if dist > D then
        die("Chest is too far")
      end
    else
      -- something is in front of us
      if data.name=="minecraft:chest" then
        dropAllLoots()
        -- go back where we came from, but in a different lane
        turtle.up()
        turtle.up()
        common.turnAround()
        for i=1,dist do
          turtle.forward()
        end
        return
      else
        -- if we are stuck behind something, wait patiently
        -- it's probably another turtle in lane
        os.sleep(3)
      end
    end
  end
end

-- drop everything into the chest in front of us, except coal, which we'll use to fuel
function dropAllLoots()
  for i=1,16 do
    turtle.select(i)

    data = turtle.getItemDetail(i)
    if data then
      if data.name=="minecraft:coal" then
        -- refuel
        local gap = (turtle.getFuelLimit()-turtle.getFuelLevel())/80;
        gap = math.min(gap,turtle.getItemCount(i))
        turtle.refuel(gap)
        turtle.drop() -- drop remaining coal
      else
        while not turtle.drop() do
          print("chest full")
          os.sleep(10)
        end
      end
    end
  end
end

-- given the number of turtle 'army', do a mining run
function main(army)
  while true do
    roundtrip(D)
    
    -- go back to the chest and drop the loot
    chestRun()
    -- when we are back we are still at the high lane
    
    if turtle.getFuelLevel()<400 then
      -- if we are to die, don't block the mining lane
      die("Fuel too low")
    end

    -- com back to the mining lane
    turtle.down()

    -- align to the the next row
    digForward(army*2-1)
    turtle.turnRight()
  end
end

main(1)
