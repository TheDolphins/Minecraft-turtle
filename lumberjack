function isInFrontOf(name)
  local success,data = turtle.inspect();
  return success and data.name==name;  
end

-- cut the tree above
function cutUp()
  if turtle.digUp() then
    return 1
  else
    return 0
  end
end

-- cut the tree in front
function cut()
  if isInFrontOf("minecraft:log") or isInFrontOf("minecraft:leaves") then
    turtle.dig();
    return 1
  else
    return 0
  end
end

-- cut the tree in front and move forward
function cutAndForward()
  local i = cut()
  turtle.forward();
  return i
end

-- cut the tree on the right and come back to the same direction
function cutToRight()
  turtle.turnRight()
  local i = cut()
  turtle.turnLeft()
  return i
end

function cutDownTree()
  -- place the turtle under the tree
  turtle.dig();
  turtle.forward();
  
  while true do
    local x=0;
    
    x=x+cutUp();
    turtle.up();
  
    x=x+cutAndForward();
    x=x+cut();
    turtle.turnLeft();
    x=x+cutAndForward();
    x=x+cut();
    x=x+cutToRight();

    for i=1,3 do
      turtle.turnLeft();
      
      x=x+cutAndForward();
      x=x+cutToRight();
      x=x+cutAndForward();
      turtle.dig();
      x=x+cutToRight();
    end
      
    -- back to the center
    turtle.turnLeft();
    turtle.forward();
    turtle.turnRight();
    turtle.back();

    if x == 0 then
      -- if we are done, come all the way down to the ground
      while not turtle.detectDown() do
        turtle.down();
      end
      turtle.back();
      
      -- then plant a sapling
      hold("minecraft:sapling");
      turtle.place();
      
      return;
    end
  end
end
  
function hold(name)
  for i=1,16 do
    turtle.select(i)
    local detail = turtle.getItemDetail();
    if detail and detail.name==name then
      return
    end
  end
  print("No more "+name);
  die();
end

while true do
  if isInFrontOf("minecraft:cobblestone") then
    -- block is in front of us
    turtle.turnLeft();
    turtle.turnLeft();
  else
    -- is there a tree on left?
    turtle.turnLeft();
    if isInFrontOf("minecraft:log") then
      cutDownTree();
    end
    turtle.turnRight();
    turtle.forward();
  end
end

